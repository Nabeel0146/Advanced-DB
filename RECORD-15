1.      Write a MongoDB query to create a user “CUSTOMER1” and grant the read role in the INVOICE database.

INVOICE> show users
... ... [
... ...   {
... ...     _id: 'INVOICE.CUSTOMER1',
... ...     userId: UUID('5caa217c-e847-4b91-8891-7fc82fb6cff6'),
... ...     user: 'CUSTOMER1',
... ...     db: 'INVOICE',
... ...     roles: [ { role: 'read', db: 'INVOICE' } ],
... ...     mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]
... ...   }
... ... ]
... 
[
  {
    _id: 'INVOICE.CUSTOMER1',
    userId: UUID('746382eb-2b93-4903-83f7-5a448365df68'),
    user: 'CUSTOMER1',
    db: 'INVOICE',
    roles: [ { role: 'read', db: 'INVOICE' } ],
    mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]
  },
  {
    _id: 'INVOICE.customer1',
    userId: UUID('e4c39fda-0d54-4851-85d6-b4f3b559ca2f'),
    user: 'customer1',
    db: 'INVOICE',
    roles: [ { role: 'read', db: 'INVOICE' } ],
    mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]
  }
]




2. Write a MongoDB query to create the backup for the INVOICE database.

ksb@ksb-OptiPlex-3060:~$ mkdir -p /home/ksb/mongo_backups
mongodump --db=INVOICE --out=/home/ksb/mongo_backups
2025-05-03T12:05:07.623+0530	writing INVOICE.CUSTOMER to /home/ksb/mongo_backups/INVOICE/CUSTOMER.bson
2025-05-03T12:05:07.623+0530	writing INVOICE.product to /home/ksb/mongo_backups/INVOICE/product.bson
2025-05-03T12:05:07.623+0530	writing INVOICE.PRODUCT to /home/ksb/mongo_backups/INVOICE/PRODUCT.bson
2025-05-03T12:05:07.624+0530	done dumping INVOICE.product (3 documents)
2025-05-03T12:05:07.625+0530	writing INVOICE.customer to /home/ksb/mongo_backups/INVOICE/customer.bson
2025-05-03T12:05:07.625+0530	done dumping INVOICE.customer (3 documents)
2025-05-03T12:05:07.697+0530	done dumping INVOICE.PRODUCT (5 documents)
2025-05-03T12:05:07.764+0530	done dumping INVOICE.CUSTOMER (10 documents)






3.Write a MongoDB query to restore a particular database or a collection.

ksb@ksb-OptiPlex-3060:~$ mongorestore --db=INVOICE /home/ksb/mongo_backups/INVOICE
2025-05-03T12:06:02.020+0530	The --db and --collection flags are deprecated for this use-case; please use --nsInclude instead, i.e. with --nsInclude=${DATABASE}.${COLLECTION}
2025-05-03T12:06:02.020+0530	building a list of collections to restore from /home/ksb/mongo_backups/INVOICE dir
2025-05-03T12:06:02.020+0530	reading metadata for INVOICE.customer from /home/ksb/mongo_backups/INVOICE/customer.metadata.json
2025-05-03T12:06:02.020+0530	reading metadata for INVOICE.product from /home/ksb/mongo_backups/INVOICE/product.metadata.json
2025-05-03T12:06:02.020+0530	reading metadata for INVOICE.CUSTOMER from /home/ksb/mongo_backups/INVOICE/CUSTOMER.metadata.json
2025-05-03T12:06:02.020+0530	reading metadata for INVOICE.PRODUCT from /home/ksb/mongo_backups/INVOICE/PRODUCT.metadata.json
2025-05-03T12:06:02.020+0530	restoring to existing collection INVOICE.CUSTOMER without dropping
2025-05-03T12:06:02.020+0530	restoring to existing collection INVOICE.customer without dropping
2025-05-03T12:06:02.020+0530	restoring INVOICE.CUSTOMER from /home/ksb/mongo_backups/INVOICE/CUSTOMER.bson
2025-05-03T12:06:02.020+0530	restoring INVOICE.customer from /home/ksb/mongo_backups/INVOICE/customer.bson
2025-05-03T12:06:02.020+0530	restoring to existing collection INVOICE.PRODUCT without dropping
2025-05-03T12:06:02.021+0530	restoring INVOICE.PRODUCT from /home/ksb/mongo_backups/INVOICE/PRODUCT.bson
2025-05-03T12:06:02.022+0530	restoring to existing collection INVOICE.product without dropping
2025-05-03T12:06:02.022+0530	restoring INVOICE.product from /home/ksb/mongo_backups/INVOICE/product.bson
2025-05-03T12:06:02.023+0530	continuing through error: E11000 duplicate key error collection: INVOICE.customer index: _id_ dup key: { _id: ObjectId('6815b35329f1b96264d861e1') }
2025-05-03T12:06:02.023+0530	continuing through error: E11000 duplicate key error collection: INVOICE.customer index: _id_ dup key: { _id: ObjectId('6815b35329f1b96264d861e2') }
2025-05-03T12:06:02.023+0530	continuing through error: E11000 duplicate key error collection: INVOICE.customer index: _id_ dup key: { _id: ObjectId('6815b78129f1b96264d861e6') }
2025-05-03T12:06:02.023+0530	continuing through error: E11000 duplicate key error collection: INVOICE.product index: _id_ dup key: { _id: ObjectId('6815b35829f1b96264d861e3') }
2025-05-03T12:06:02.023+0530	continuing through error: E11000 duplicate key error collection: INVOICE.product index: _id_ dup key: { _id: ObjectId('6815b35829f1b96264d861e4') }
2025-05-03T12:06:02.023+0530	continuing through error: E11000 duplicate key error collection: INVOICE.product index: _id_ dup key: { _id: ObjectId('6815b35829f1b96264d861e5') }
2025-05-03T12:06:02.031+0530	finished restoring INVOICE.customer (0 documents, 3 failures)
2025-05-03T12:06:02.033+0530	finished restoring INVOICE.product (0 documents, 3 failures)
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661ca9c9d3c1e27afbef6365') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661ca9c9d3c1e27afbef6366') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661ca9c9d3c1e27afbef6367') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661ca9c9d3c1e27afbef6368') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661ca9c9d3c1e27afbef6369') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661caa9fd3c1e27afbef636a') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661cc545d3c1e27afbef636c') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661cc57fd3c1e27afbef636d') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661cc692d3c1e27afbef636e') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.CUSTOMER index: _id_ dup key: { _id: ObjectId('661cc6acd3c1e27afbef636f') }
2025-05-03T12:06:02.051+0530	finished restoring INVOICE.CUSTOMER (0 documents, 10 failures)
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.PRODUCT index: _id_ dup key: { _id: ObjectId('661ca8f6d3c1e27afbef6360') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.PRODUCT index: _id_ dup key: { _id: ObjectId('661ca8f6d3c1e27afbef6361') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.PRODUCT index: _id_ dup key: { _id: ObjectId('661ca8f6d3c1e27afbef6362') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.PRODUCT index: _id_ dup key: { _id: ObjectId('661ca8f6d3c1e27afbef6363') }
2025-05-03T12:06:02.051+0530	continuing through error: E11000 duplicate key error collection: INVOICE.PRODUCT index: _id_ dup key: { _id: ObjectId('661ca8f6d3c1e27afbef6364') }
2025-05-03T12:06:02.051+0530	finished restoring INVOICE.PRODUCT (0 documents, 5 failures)
2025-05-03T12:06:02.051+0530	no indexes to restore for collection INVOICE.PRODUCT
2025-05-03T12:06:02.051+0530	no indexes to restore for collection INVOICE.customer
2025-05-03T12:06:02.051+0530	no indexes to restore for collection INVOICE.product
2025-05-03T12:06:02.051+0530	no indexes to restore for collection INVOICE.CUSTOMER
2025-05-03T12:06:02.051+0530	0 document(s) restored successfully. 21 document(s) failed to restore.








4.Write a MongoDB query to create an index for the collection customer using the field customer_name.


INVOICE> db.customer.createIndex({ customer_name: 1 })
customer_name_1
INVOICE> db.CUSTOMER.getIndexes()
[ { v: 2, key: { _id: 1 }, name: '_id_' } ]



