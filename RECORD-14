1. Write a MongoDB query to sort customer details in ascending order of their name.

INVOICE> db.customer.find().sort({ name: 1 })
... 
[
  {
    _id: ObjectId('6815b35329f1b96264d861e1'),
    customer_id: '1002',
    name: 'arya',
    address: { place: 'beach', city: 'kochi' },
    phone: '9845623412'
  },
  {
    _id: ObjectId('6815b35329f1b96264d861e2'),
    customer_id: '1003',
    name: 'roshan',
    address: { place: 'thodu', city: 'kollam' },
    phone: '9597789524'
  }
]






2.      Write a MongoDB query to count number of customers in each city.
INVOICE> db.customer.aggregate([
...   {
...     $group: {
...       _id: "$address.city",
...       count: { $sum: 1 }
...     }
...   }
... ])
... 
[ { _id: 'kochi', count: 1 }, { _id: 'kollam', count: 1 } ]







3.      Write a MongoDB query to find minimum and maximum age in each city.
INVOICE> db.customer.updateMany({ customer_id: "1001" }, { $set: { age: 25 } })
... db.customer.updateMany({ customer_id: "1002" }, { $set: { age: 30 } })
... db.customer.updateMany({ customer_id: "1003" }, { $set: { age: 22 } })
... 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
INVOICE> db.customer.aggregate([
...   {
...     $group: {
...       _id: "$address.city",
...       minAge: { $min: "$age" },
...       maxAge: { $max: "$age" }
...     }
...   }
... ])
... 
[
  { _id: 'kollam', minAge: 22, maxAge: 22 },
  { _id: 'kochi', minAge: 30, maxAge: 30 }
]





4.       Write a MongoDB query using the $match stage to retrieve all customer documents whose customer_name starts with the letter “S”.

INVOICE> db.customer.aggregate([
...   {
...     $match: {
...       name: { $regex: "^S", $options: "i" }
...     }
...   }
... ])
... 
[
  {
    _id: ObjectId('6815b78129f1b96264d861e6'),
    customer_id: '1004',
    name: 'Sneha',
    address: { place: 'MG Road', city: 'Thrissur' },
    phone: '9876543210',
    age: 28,
    product_id: '101'
  }
]






5.      Write a query using $lookup to join CUSTOMER and PRODUCT collections and display only customer name, product name, and price.



INVOICE> db.customer.updateMany({ customer_id: "1001" }, { $set: { product_product_id: "101" } })
... db.customer.updateMany({ customer_id: "1002" }, { $set: { product_id: "102" } })
... db.customer.updateMany({ customer_id: "1003" }, { $set: { product_id: "103" } })
... 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
INVOICE> db.customer.aggregate([
...   {
...     $lookup: {
...       from: "product",
...       localField: "product_id",
...       foreignField: "pid",
...       as: "product_info"
...     }
...   },
...   {
...     $unwind: "$product_info"
...   },
...   {
...     $project: {
...       _id: 0,
...       customer_name: "$name",
...       product_name: "$product_info.name",
...       price: "$product_info.price"
...     }
...   }
... ])
... 
[
  { customer_name: 'arya', product_name: 'pencil', price: 10 },
  { customer_name: 'roshan', product_name: 'eraser', price: 5 }
]
//VERIFIED
